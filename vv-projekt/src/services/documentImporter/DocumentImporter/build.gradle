plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube"  version "6.0.1.5171"
    id "application"
}

group = 'de.thro.importer'
version = '1.0-SNAPSHOT'

application {
    mainClass = 'de.thro.pipeline.Main'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'org.apache.pdfbox:pdfbox:3.0.4'
    testImplementation 'org.apache.pdfbox:pdfbox:3.0.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    implementation 'ch.qos.logback:logback-classic:1.5.13'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    implementation project(':shared')
    implementation 'org.springframework.boot:spring-boot-starter:3.2.5'
}

tasks {
    test {
        useJUnitPlatform()
        ignoreFailures = true
        finalizedBy jacocoTestReport
    }
}

jacoco {
    toolVersion = "0.8.12"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
sonarqube {
    properties {
        property "sonar.host.url", "https://inf-sonarqube.th-rosenheim.de"
        property "sonar.projectKey", "Casper_Pelsma"
    }
}
jar {
    dependsOn configurations.runtimeClasspath
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                'Implementation-Title': 'Document Importer',
                'Implementation-Version': version,
                'Main-Class': application.mainClass.get()
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

